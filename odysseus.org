#+TITLE: GNU Emacs.w0lper
#+AUTHOR: Vinicius Moraes
#+EMAIL: vinicius.moraes@eternodevir.com
#+OPTIONS: num:nil

#+html: <p align="center"><img src="img/polytropos.png" /></p>

This is my personal *GNU Emacs* configuration. The main configuration file is an =.org= file named after /Odysseus/, which is loaded through =init.el=. As you may have noticed, this is the configuration itself due to *org-mode* literate programming capabilities.

**** Table of contents                                             :TOC_4:
  - [[#features][Features]]
  - [[#dependencies][Dependencies]]
  - [[#odysseus][Odysseus]]
    - [[#dashboard-screen][Dashboard screen]]
    - [[#display][Display]]
    - [[#theme-customization][Theme customization]]
    - [[#modeline][Modeline]]
    - [[#moving-around-emacs][Moving around Emacs]]
    - [[#minor-conveniences][Minor conveniences]]
    - [[#text-manipulation][Text manipulation]]
    - [[#functionality][Functionality]]
    - [[#programming][Programming]]
      - [[#cc][c/c++]]
      - [[#python][python]]
      - [[#lisp][lisp]]
      - [[#shell][shell]]
      - [[#go][go]]
      - [[#yaml][yaml]]
      - [[#markdown][markdown]]
    - [[#org][Org]]
    - [[#git-integration][Git integration]]
    - [[#remote-editing][Remote editing]]
    - [[#blog][Blog]]
    - [[#writing][Writing]]
    - [[#translation][Translation]]
    - [[#emailing][Emailing]]
    - [[#instant-messaging][Instant messaging]]
    - [[#diminish][Diminish]]
  - [[#license][License]]

** Features

The current configuration focuses on:

- Coding
- Note-taking
- Writing
- Translation
- Academic research 
- Remote Server Administration
- Blog
- Emailing
- IRC 
  
/Contact me if you'd like to suggest a package. I'm always glad to learn about new ones./

** Dependencies

- packages
  - clang (c/c++)
  - sbcl (lisp)
  - virtualenv (python)
  - ripgrep pcre2 (org-roam)
- pip
  - jedi (python)
  - flake8 (python)
  - autopep8 (python)

** Odysseus
*** Dashboard screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (use-package dashboard
    :ensure t
    :init
    (dashboard-setup-startup-hook)
    (add-hook 'dashboard-mode-hook 'variable-pitch-mode)
    (setq initial-buffer-choice (lambda () (dashboard-refresh-buffer) (get-buffer "*dashboard*")))
    :custom
    (dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
    (dashboard-items '((recents . 5)
                       (projects . 5)
                       (bookmarks . 5)
                       (agenda . 3)))
    (dashboard-center-content t)
    (dashboard-set-file-icons t)
    (dashboard-banner-logo-title "Welcome back, w0lper!")
    (dashboard-agenda-sort-strategy '(time-up))
    (dashboard-agenda-prefix-format "%i %-12:c %s "))

  (use-package all-the-icons
    :ensure t)

  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1)
    :bind
    ("C-c p" . projectile-command-map)
    ("<f5>" . projectile-compile-project))
#+END_SRC

*** Display
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Iosevka Aile"))))
   '(fixed-pitch ((t ( :family "Iosevka  Medium"))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch))))))

  (use-package zerodark-theme
    :ensure t
    :config
    (load-theme 'zerodark t))

  (setq visible-bell t)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1))

  (setq locale-coding-system 'utf-8
        default-file-name-coding-system 'utf-8
        default-keyboard-coding-system 'utf-8
        default-process-coding-system '(utf-8 . utf-8)
        default-sendmail-coding-system 'utf-8
        default-terminal-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (if (display-graphic-p)
      (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

*** Theme customization
#+BEGIN_SRC emacs-lisp
  (let ((class '((class color) (min-colors 89)))
        (default (if (true-color-p) "#abb2bf" "#afafaf"))
        (light (if (true-color-p) "#ccd4e3" "#d7d7d7"))
        (background (if (true-color-p) "#282c34" "#333333"))
        (background-dark (if (true-color-p) "#24282f" "#222222"))
        (background-darker (if (true-color-p) "#22252c" "#222222"))
        (mode-line-inactive (if "#1c2129" "#222222"))
        (mode-line-active (if (true-color-p) "#6f337e" "#875f87"))
        (background-lighter (if (true-color-p) "#3a3f4b" "#5f5f5f"))
        (background-red (if (true-color-p) "#4c3840" "#5f5f5f"))
        (bright-background-red (if (true-color-p) "#744a5b" "#744a5b"))
        (background-purple (if (true-color-p) "#48384c" "#5f5f5f"))
        (background-blue (if (true-color-p) "#38394c" "#444444"))
        (bright-background-blue (if (true-color-p) "#4e5079" "#4e5079"))
        (background-green (if (true-color-p) "#3d4a41" "#5f5f5f"))
        (bright-background-green (if (true-color-p) "#3f6d54" "#3f6d54"))
        (background-orange (if (true-color-p) "#4a473d" "#5f5f5f"))
        (hl-line (if (true-color-p) "#2c323b" "#333333"))
        (grey (if (true-color-p) "#cccccc" "#cccccc"))
        (grey-dark (if (true-color-p) "#666666" "#666666"))
        (highlight (if (true-color-p) "#3e4451" "#5f5f5f"))
        (comment (if (true-color-p) "#687080" "#707070"))
        (orange (if (true-color-p) "#da8548" "#d7875f"))
        (orange-light (if (true-color-p) "#ddbd78" "#d7af87"))
        (red (if (true-color-p) "#ff6c6b" "#ff5f5f"))
        (purple (if (true-color-p) "#c678dd" "#d787d7"))
        (purple-dark (if (true-color-p) "#64446d" "#5f5f5f"))
        (blue (if (true-color-p) "#61afef" "#5fafff"))
        (blue-dark (if (true-color-p) "#1f5582" "#005f87"))
        (green (if (true-color-p) "#98be65" "#87af5f"))
        (green-light (if (true-color-p) "#9eac8c" "#afaf87"))
        (peach "PeachPuff3")
        (diff-added-background (if (true-color-p) "#284437" "#284437"))
        (diff-added-refined-background (if (true-color-p) "#1e8967" "#1e8967"))
        (diff-removed-background (if (true-color-p) "#583333" "#580000"))
        (diff-removed-refined-background (if (true-color-p) "#b33c49" "#b33c49"))
        (diff-current-background (if (true-color-p) "#29457b" "#29457b"))
        (diff-current-refined-background (if (true-color-p) "#4174ae" "#4174ae")))

    (custom-theme-set-faces
     'zerodark

     ;; dashboard
     `(dashboard-heading-face ((,class (:background ,background :foreground ,blue
                                                    :bold t :height 1.1))))
     `(dashboard-banner-logo-title-face ((,class (:background ,background 
                                                              :bold t :height 1.0))))
     `(widget-button ((,class (:background ,background :foreground ,default :bold nil
                                           :underline t :height 1.0))))

     ;; erc stuff
     `(erc-nick-default-face ((,class :foreground ,blue :background ,background :weight bold)))

     ;; org stuff
     `(outline-1 ((,class (:foreground ,blue :weight bold :height 1.5 :bold nil))))
     `(outline-2 ((,class (:foreground ,orange-light :weight bold :height 1.4 :bold nil))))
     `(outline-3 ((,class (:foreground ,green-light :weight bold :height 1.3 :bold nil))))
     `(outline-4 ((,class (:foreground ,blue :weight bold :height 1.2 :bold nil))))
     `(outline-5 ((,class (:foreground ,orange-light :weight bold :height 1.1 :bold nil))))
     `(outline-6 ((,class (:foreground ,green-light :weight bold :height 1.1 :bold nil))))
     `(outline-7 ((,class (:foreground ,blue :weight bold :height 1.1 :bold nil))))
     `(outline-8 ((,class (:foreground ,orange-light :weight bold :height 1.1 :bold nil))))

     ;; link faces
     `(link ((,class (:foreground ,purple :underline t))))
     `(link-visited ((,class (:foreground ,purple :underline t)))))

    (enable-theme 'zerodark))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (custom-set-variables
     '(spaceline-buffer-encoding-abbrev-p nil)
     '(spaceline-line-column-p nil)
     '(spaceline-line-p nil)
     '(powerline-default-separator (quote arrow)))
    (spaceline-spacemacs-theme))

  (custom-set-variables
   '(line-number-mode t)
   '(column-number-mode t)
   '(display-time-24hr-format t)
   '(display-time-format "%H:%M - %d %B %Y"))
  (display-time-mode 1)
#+END_SRC

*** Moving around Emacs
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)

  ;; (use-package ivy
  ;;   :ensure t
  ;;   :custom
  ;;   (ivy-use-virtual-buffers t)
  ;;   (ivy-count-format "%d/%d")) ; deprecated in favour of helm

  ;; (use-package vertico
  ;;   :ensure t
  ;;   :init
  ;;   (vertico-mode 1)) ; deprecated in favour of helm

  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode)
    :custom
    (which-key-idle-delay 0.5))

  ;; (use-package swiper
  ;;   :ensure t
  ;;   :bind
  ;;   ("C-s" . 'swiper)) ; deprecated in favour of helm-occur

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

  (use-package switch-window
    :ensure t
    :bind*
    ([remap other-window] . switch-window)
    :custom
    (switch-window-input-style 'minibuffer)
    (switch-window-shortcut-style 'qwerty)
    (switch-window-increase 4)
    (switch-window-threshold 2)
    (switch-window-qwerty-shortcuts
     '("a" "s" "d" "f" "j" "k" "l" "i" "o")))


  (global-set-key (kbd "C-x b") 'ibuffer)
  ;; (setq ibuffer-expert t) ; only when used to ibuffer

  (use-package linum-relative
    :ensure t
    :diminish linum-relative-mode
    :custom
    (linum-relative-current-symbol "")
    :hook
    (prog-mode . linum-relative-mode))

  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    ("C-s" . helm-occur) 
    (:map helm-find-files-map
          ("C-b" . helm-find-files-up-one-level)
          ("C-f" . helm-execute-persistent-action))
    :custom
    (helm-autoresize-max-height 0)
    (helm-autoresize-min-height 40)
    (helm-M-x-fuzzy-match t)
    (helm-buffers-fuzzy-matching t)
    (helm-recentf-fuzzy-match t)
    (helm-semantic-fuzzy-match t)
    (helm-imenu-fuzzy-match t)
    (helm-split-window-in-side-p nil)
    (helm-move-to-line-cycle-in-source nil)
    (helm-ff-search-library-in-sexp t)
    (helm-scroll-amount 8 )
    (helm-echo-input-in-header-line t)
    :init
    (helm-mode 1)
    (helm-autoresize-mode 1))

  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)

  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)

  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function
                                          kill-buffer-query-functions))
#+END_SRC

*** Minor conveniences
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    "Opens ~/.emacs.d/odysseus.org"
    (interactive)
    (find-file "~/.emacs.d/odysseus.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    "Reloads ~/.emacs.d/odysseus.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/odysseus.org")))
  (global-set-key (kbd "C-c r") 'config-reload)

  (global-subword-mode 1)

  (electric-pair-mode t)

  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")))

  (use-package org-auto-tangle
    :ensure t
    :diminish org-auto-tangle-mode 
    :defer t
    :hook (org-mode . org-auto-tangle-mode))

  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :config
    (beacon-mode 1))

  (show-paren-mode 1)

  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :hook (prog-mode org-mode conf-mode))

  (use-package rainbow-delimiters
    :ensure t
    :diminish rainbow-delimiters-mode
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package expand-region
    :ensure t
    :bind
    ("C-q" . er/expand-region))


  (use-package hungry-delete
    :ensure t
    :diminish hungry-delete-mode
    :config
    (global-hungry-delete-mode))

  (use-package zzz-to-char
    :ensure t
    :bind
    ("M-z" . zzz-to-char))

  (setq kill-ring-max 100)

  (use-package popup-kill-ring
    :ensure t
    :bind
    ("M-y" . popup-kill-ring))

  (use-package helm-descbinds
    :ensure t)

  (use-package olivetti
    :ensure t
    :diminish olivetti-mode
    :custom
    olivetti-body-width '140
    :bind
    ("C-c o" . olivetti-mode))
#+END_SRC

*** Text manipulation
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind
    ("C-c q" . 'mark-next-like-this))

  (defun kill-inner-word/daedreth ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'kill-inner-word/daedreth)

  (defun copy-whole-word/daedreth ()
    "Copies a word at the cursor position."
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c w c") 'copy-whole-word/daedreth)

  (defun copy-whole-line/daedreth ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c l c") 'copy-whole-line/daedreth)
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC

*** Functionality
#+BEGIN_SRC emacs-lisp
  (setf epa-pinentry-mode 'loopback)
  (setq auth-sources '("~/.emacs.d/auth/.authinfo.gpg"))
  (load-file "~/.emacs.d/auth/.restrictconf.el")

  (setq backup-directory-alist '(("." . "~/.orpheus/gnu-emacs/saves")))

  (transient-mark-mode 1);

  (server-start)

  ;; (global-auto-revert-mode 1) ; too resource intensive atm

  (defalias 'yes-or-no-p 'y-or-n-p)

  (use-package async
    :ensure t
    :init (dired-async-mode 1))

  (use-package company
    :ensure t
    :custom
    (company-global-modes #'(not eshell-mode))
    (company-idle-delay 0)
    (company-minimum-prefix-length 3)
    (company-tooltip-align-annotations t)
    (company-tooltip-flip-when-above t)
    (company-search-regexp-function #'company-search-flex-regexp)
    (company-dabbrev-ignore-case 'keep-prefix))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "<tab>")
      (defun fix-company-tab/w0lper ()
        "Fix `company-yasnippet' interaction with `yas-expand' command."
        (interactive)
        (when (null (yas-expand))
          (company-complete-common))))
    (define-key company-active-map (kbd "C-s") #'company-filter-candidates)
    (define-key company-active-map (kbd "C-M-s") #'company-search-candidates))

  (defun company-general/w0lper ()
    "Set up `company-mode' for general usage."
    (setq-local company-backends '((company-dabbrev
                                    company-file
                                    company-yasnippet))))

  (add-hook 'after-init-hook #'company-general/w0lper)
#+END_SRC

*** Programming
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets :ensure t)
    (yas-reload-all))

  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :custom
    (flycheck-idle-change-delay 2))
#+END_SRC

**** c/c++
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook (lambda ()
                           (yas-minor-mode)
                           (flycheck-mode)
                           (company-mode)
                           (company-c-mode/w0lper)
                           (irony-mode)))

  (use-package flycheck-clang-analyzer
    :ensure t
    :init
    (require 'flycheck)
    :config
    (flycheck-clang-analyzer-setup))

  (use-package company-c-headers
    :ensure t
    :init
    (require 'company))

  (use-package company-irony
    :ensure t
    :init
    (require 'company))

  (use-package irony
    :ensure t
    :diminish irony-mode
    :hook
    (irony-mode-hook . irony-cdb-autosetup-compile-options))

  (defun company-c-mode/w0lper ()
    "Set up `company-mode' for `c-mode'."
    (setq-local company-minimum-prefix-length 1)
    (setq-local company-backends '((company-clang
                                    company-capf
                                    company-dabbrev-code
                                    company-keywords
                                    company-files
                                    company-c-headers
                                    company-irony
                                    company-yasnippet))))
#+END_SRC

**** python
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook (lambda ()
                                (yas-minor-mode)
                                (flycheck-mode)
                                (company-mode)
                                (company-python-mode/w0lper)))

  (setq python-shell-interpreter "python3")

  (use-package company-jedi
    :ensure t
    :init
    (require 'company)
    :custom
    (jedi:complete-on-dot t))

  (defun company-python-mode/w0lper ()
    "Set up `company-mode' for `python-mode'."
    (setq-local company-minimum-prefix-length 1)
    (setq-local company-backends '((company-jedi
                                    company-capf
                                    company-dabbrev-code
                                    company-keywords
                                    company-files
                                    company-yasnippet))))
#+END_SRC

**** lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook (lambda ()
                                    (yas-minor-mode)
                                    ;; (flycheck-mode)
                                    (company-mode)
                                    (company-lisp-mode/w0lper)
                                    (eldoc-mode)))

  (use-package sly
    :ensure t
    :init
    (setq inferior-lisp-program "sbcl")
    (add-to-list 'sly-contribs 'sly-autodoc)
    (add-to-list 'sly-contribs 'sly-fancy))

  (defun company-lisp-mode/w0lper ()
    "Set up `company-mode' for `lisp-mode'."
    (setq-local company-minimum-prefix-length 1)
    (setq-local company-backends '((company-elisp
                                    company-capf
                                    company-dabbrev-code
                                    company-keywords
                                    company-files
                                    company-yasnippet))))
#+END_SRC

**** shell
#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook (lambda ()
                            (yas-minor-mode)
                            (flycheck-mode)
                            (company-mode)
                            (company-sh-mode/w0lper)))

  (use-package company-shell
    :ensure t
    :init
    (require 'company))

  (defun company-sh-mode/w0lper ()
    "Set up `company-mode' for `sh-mode'."
    (setq-local company-minimum-prefix-length 1)
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code
                                    company-keywords
                                    company-files
                                    company-yasnippet))))
#+END_SRC

**** go
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook (lambda ()
                            (yas-minor-mode)
                            (flycheck-mode)
                            (company-mode)
                            (company-go-mode/w0lper)))

  (use-package go-mode
    :ensure t)

  (defun company-go-mode/w0lper ()
    "Set up `company-mode' for `go-mode'."
    (setq-local company-minimum-prefix-length 1)
    (setq-local company-backends '((company-capf
                                    company-dabbrev-code
                                    company-keywords
                                    company-files
                                    company-yasnippet))))
#+END_SRC

**** yaml
#+BEGIN_SRC emacs-lisp
  (add-hook 'yaml-mode-hook (lambda ()
                              (yas-minor-mode)
                              (flycheck-mode)
                              (company-mode)
                              (company-yaml-mode/w0lper)))

  (use-package yaml-mode
    :ensure t)

  (defun company-yaml-mode/w0lper ()
    "Set up `company-mode' for `yaml-mode'."
    (setq-local company-minimum-prefix-length 1)
    (setq-local company-backends '((company-capf
                                    company-dabbrev-code
                                    company-keywords
                                    company-files
                                    company-yasnippet))))
#+END_SRC

**** markdown
#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook (lambda ()
                                  (yas-minor-mode)
                                  (flycheck-mode)
                                  (company-mode)
                                  (company-markdown-mode/w0lper)))

  (use-package markdown-mode
    :ensure t)

  (defun company-markdown-mode/w0lper ()
    "Set up `company-mode' for `markdown-mode'."
    (setq-local company-minimum-prefix-length 1)
    (setq-local company-backends '((company-capf
                                    company-dabbrev-code
                                    company-keywords
                                    company-files
                                    company-yasnippet))))
#+END_SRC

*** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin gnu
    :custom
    (org-ellipsis " ")
    (org-use-speed-commands t)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-confirm-babel-evaluate t)
    (org-babel-load-languages '((emacs-lisp . t)
                                (shell . t)
                                (python . t)
                                (C . t)))
    (org-babel-python-command "python3")
    (org-export-with-smart-quotes t)
    (org-src-window-setup 'current-window)
    (org-todo-keywords '((sequence "TODO(t!)" "NEXT(n!)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELED(c@/!)" "MEETING(m!)")
                         (sequence "WRITING(wr!)" "REVISION I(r!)" "REVSION II(rr!)" "PROOFREADING(l!)" "|" "PUBLISHED(p!)")))
    (org-todo-keyword-faces '(("CANCELED" . (:foreground "green-light"  :background "#4c3840" :weight bold))
                              ("MEETING" . (:foreground "pink"  :background "#4c3840" :weight bold))
                              ("NEXT" . (:foreground "orange" :background "#4c3840" :weight bold))))
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-tag-alist '((:startgroup)
                     ("personal" . ?p)
                     ("work" . ?w)
                     ("study" . ?s)
                     (:endgroup)
                     ("autobiography" . ?a)
                     ("cinema" . ?c)
                     ("computing" . ?u)
                     ("reading" . ?r)
                     ("translation" . ?t)
                     ("music" . ?m)))
    (org-capture-templates
     '(("t" "Task" entry (file+headline "~/.orpheus/org-agenda/refile.org" "Tasks")
        (file "~/.emacs.d/local/org/task-template.org") :clock-in t :clock-resume t)
       ("m" "Meeting" entry (file+headline "~/.orpheus/org-agenda/refile.org" "Meetings")
        (file "~/.emacs.d/local/org/meeting-template.org") :clock-in t :clock-resume t)
       ("n" "Notes" entry (file+headline "~/.orpheus/org-agenda/refile.org" "Notes")
        (file "~/.emacs.d/local/org/note-template.org") :clock-in t :clock-resume t)
       ("j" "Journal" entry (file+olp+datetree "~/.orpheus/org-agenda/journal.org")
        (file "~/.emacs.d/local/org/journal-template.org") :clock-in t :clock-resume t)))
    (org-agenda-files '("~/.orpheus/org-agenda/"))
    (org-refile-targets '((nil :maxlevel . 1)
                          (org-agenda-files :maxlevel . 1))) 
    :hook
    (org-mode . (lambda ()
                  (visual-line-mode 1)
                  (variable-pitch-mode 1)
                  (org-indent-mode 1)
                  (company-mode 1)
                  (yas-minor-mode 1)))
    :bind
    ("C-c '" . org-edit-src-code)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture))

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/.orpheus/org-roam"))
    (org-roam-mode-sections (list #'org-roam-backlinks-section
                                  #'org-roam-reflinks-section
                                  #'org-roam-unlinked-references-section))
    (org-roam-capture-templates
     '(("p" "Project")
       ("pw" "Writing" plain (file "~/.emacs.d/local/org-roam/writing-template.org")
        :target (file "%<%Y%m%d%H%M%S>-writing-${slug}.org") :unnarrowed t :clock-in t :clock-resume t :jump-to-captured t :kill-buffer nil)
       ("pp" "Presenting" plain (file "~/.emacs.d/local/org-roam/presenting-template.org")
        :target (file "%<%Y%m%d%H%M%S>-presenting-${slug}.org") :unnarrowed t :clock-in t :clock-resume t :jump-to-captured t :kill-buffer nil)

       ("c" "Capture")
       ("cb" "Book" plain (file "~/.emacs.d/local/org-roam/book-template.org")
        :target (file "%<%Y%m%d%H%M%S>-book-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("cm" "Movie" plain (file "~/.emacs.d/local/org-roam/movie-template.org")
        :target (file "%<%Y%m%d%H%M%S>-movie-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("cu" "Music" plain (file "~/.emacs.d/local/org-roam/music-template.org")
        :target (file "%<%Y%m%d%H%M%S>-music-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("co" "Podcast" plain (file "~/.emacs.d/local/org-roam/podcast-template.org")
        :target (file "%<%Y%m%d%H%M%S>-podcast-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("cp" "Poem" plain (file "~/.emacs.d/local/org-roam/poem-template.org")
        :target (file "%<%Y%m%d%H%M%S>-poem-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("cq" "Quote" plain (file "~/.emacs.d/local/org-roam/quote-template.org")
        :target (file "%<%Y%m%d%H%M%S>-quote-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("ct" "Text" plain (file "~/.emacs.d/local/org-roam/text-template.org")
        :target (file "%<%Y%m%d%H%M%S>-text-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("ch" "Theatre" plain (file "~/.emacs.d/local/org-roam/theatre-template.org")
        :target (file "%<%Y%m%d%H%M%S>-theatre-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)

       ("n" "Note")
       ("nc" "Class" plain (file "~/.emacs.d/local/org-roam/class-template.org")
        :target (file "%<%Y%m%d%H%M%S>-class-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("no" "Convo" plain (file "~/.emacs.d/local/org-roam/convo-template.org")
        :target (file "%<%Y%m%d%H%M%S>-convo-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("nu" "Course" plain (file "~/.emacs.d/local/org-roam/course-template.org")
        :target (file "%<%Y%m%d%H%M%S>-course-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("nd" "Dream" plain (file "~/.emacs.d/local/org-roam/dream-template.org")
        :target (file "%<%Y%m%d%H%M%S>-dream-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("ni" "Idea" plain (file "~/.emacs.d/local/org-roam/idea-template.org")
        :target (file "%<%Y%m%d%H%M%S>-idea-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("ns" "Sprint" plain (file "~/.emacs.d/local/org-roam/sprint-template.org")
        :target (file "%<%Y%m%d%H%M%S>-sprint-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)
       ("nz" "Zettel" plain (file "~/.emacs.d/local/org-roam/zettel-template.org")
        :target (file "%<%Y%m%d%H%M%S>-zettel-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)

       ("i" "Index" plain (file "~/.emacs.d/local/org-roam/index-template.org")
        :target (file "%<%Y%m%d%H%M%S>-index-${slug}.org") :unnarrowed t :clock-in t :clock-resume t)))

    :config
    (org-roam-db-autosync-mode)
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))
    :bind
    ("C-c n f" . 'org-roam-node-find)
    ("C-c n i" . 'org-roam-node-insert)
    ("C-c n r" . 'org-roam-ref-add)
    ("C-c n t" . 'org-roam-tag-add)
    ("C-c n c" . 'org-roam-capture)
    ("C-c n n" . org-roam-buffer-toggle)
    ("C-c n a" . org-roam-alias-add))

  (use-package org-roam-ui
    :ensure t
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start t)
    :bind
    ("C-c n u" . org-roam-ui-mode))

  ;; (use-package org-roam-bibtex
  ;;   :ensure t)

  ;; (use-package helm-bibtex
  ;; :ensure t)

  (use-package pdf-tools
    :ensure t)

  (use-package org-noter
    :ensure t
    :init
    (require 'pdf-tools))

  (use-package org-ref
    :ensure t)

  (use-package ox-twbs
    :ensure t)

  (use-package ox-reveal
    :ensure t
    :custom
    (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

  (use-package org-bullets
    :ensure t
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
    :hook
    (org-mode-hook . org-bullets-mode))

  (use-package orgmdb
    :ensure t
    :custom
    (orgmdb-poster-folder "~/.orpheus/orgmdb"))

  (use-package htmlize
    :ensure t)

  (use-package toc-org
    :ensure t)

  (defun orgmdb-insert-movie-data/w0lper (&rest args)
    "Insert content containing movie info and poster of given ARGS.
    ARGS should be in the same form with `orgmdb' function.

    If this function is called on an org heading then it'll try to
    detect parameters based on that heading.  If not, it'll simply ask
    for title and year."
    (interactive (orgmdb--detect-params-from-header))
    (let ((info (apply #'orgmdb `(,@args :episode all :plot full))))
      (orgmdb--ensure-response-is-successful info)
      (insert (format "* %s (%s) - %s\n" (orgmdb-title info) (orgmdb-year info) (orgmdb-imdb-link info)))
      (insert "\n")
      (insert (format "[[file:%s]]\n\n" (orgmdb--download-image-for info)))
      (insert (format "- Genre :: %s\n" (orgmdb-genre info)))
      (insert (format "- Runtime :: %s\n" (orgmdb-runtime info)))
      (insert (format "- Released :: %s\n" (orgmdb-released info)))
      (insert (format "- Rated :: %s\n" (orgmdb-rated info)))
      (insert "\n")
      (insert (format "- Director :: %s\n" (orgmdb-director info)))
      (insert (format "- Writer :: %s\n" (orgmdb-writer info)))
      (insert (format "- Production :: %s\n" (orgmdb-writer info)))
      (insert (format "- Actors :: %s\n" (orgmdb-actors info)))
      (insert "\n")
      (insert (format "- Language :: %s\n" (orgmdb-language info)))
      (insert (format "- Country :: %s\n" (orgmdb-country info)))
      (insert (format "- Awards :: %s\n" (orgmdb-awards info)))
      (insert "\n")
      (insert (format "- Metacritic :: %s\n" (orgmdb-metacritic info)))
      (insert (format "- IMDb Rating :: %s (%s votes)\n" (orgmdb-imdb-rating info) (orgmdb-imdb-votes info)))
      (insert (format "- Tomatometer :: %s\n" (orgmdb-tomatometer info)))
      (insert "\n")
      (insert (format "- Plot :: %s\n" (orgmdb-plot info)))
      (insert "\n")
      (let (last-season)
        (seq-do
         (lambda (episode)
           (let-alist episode
             (let ((curr-season (string-to-number .Season)))
               (insert (format "%s** [[imdb:%s][%s]]\n"
                               (if (and last-season (eq curr-season last-season))
                                   ""
                                 (setq last-season curr-season)
                                 (format "* Session %s\n" curr-season))
                               .imdbID
                               (orgmdb--episode-to-title episode)))
               (insert (format "- IMDb Rating :: %s\n" .imdbRating))
               (insert (format "- Released :: %s\n" .Released))
               (insert "\n"))))
         (alist-get 'Episodes info)))
      (org-display-inline-images)))
#+END_SRC

*** Git integration
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil
          git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

*** Remote editing
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")

  (use-package sudo-edit
    :ensure t)
#+END_SRC

*** Blog
#+BEGIN_SRC emacs-lisp
  (use-package easy-hugo
    :ensure t
    :init
    (setq easy-hugo-postdir "content/blog"
          easy-hugo-basedir "~/.config/hugo/blog.backend/blog/"
          easy-hugo-url "https://w0lper.github.io"
          easy-hugo-sshdomain ""
          easy-hugo-root "~/.config/hugo/blog.backend/blog/public/"
          easy-hugo-previewtime "300"
          easy-hugo-default-ext ".org"
          easy-hugo-org-header t)
    :bind
    ("C-c h" . easy-hugo))
#+END_SRC

*** Writing
#+BEGIN_SRC emacs-lisp
  (use-package fountain-mode
    :ensure t)
#+END_SRC

*** Translation
#+BEGIN_SRC emacs-lisp
  (use-package go-translate
    :ensure t
    :custom
    (gts-translate-list '(("pt-br" "en")
                          ("en" "de")
                          ("en""fr")))
    (gts-default-translator
     (gts-translator
      :picker (gts-noprompt-picker)
      :engines (list (gts-google-engine))
      :render (gts-buffer-render)))
    :bind
    ("C-c t" . gts-do-translate))
#+END_SRC

*** Emailing
#+BEGIN_SRC emacs-lisp
  (use-package gnus
    :ensure nil
    :custom
    (user-full-name "Vinícius Moraes") 
    (user-mail-address "vinicius.moraes@eternodevir.com")
    (message-signature "Vinícius Moraes\neternodevir.com")
    (gnus-select-method '(nnimap "gmail"
                                    (nnimap-address "imap.gmail.com")
                                    (nnimap-server-port 993)
                                    (nnimap-stream ssl)
                                    (nnimap-authinfo-file "~/.emacs.d/auth/.authinfo.gpg")))
    (message-send-mail-function 'smtpmail-send-it)
    (smtpmail-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-service 587)
    (gnus-secondary-select-methods '((nntp "news.gmane.io")))
    ;; general
    (gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
    (message-cite-reply-position 'below)
    (gnus-interactive-exit nil)
    (gnus-gcc-mark-as-read t)
    (gnus-agent t)
    ;; (gnus-novice-user nil)           ; careful with this
    (gnus-check-new-newsgroups 'ask-server)
    (gnus-read-active-file 'some)
    (gnus-agent-article-alist-save-format 1)  ; uncompressed
    (gnus-agent-cache t)
    (gnus-agent-confirmation-function 'y-or-n-p)
    (gnus-agent-consider-all-articles nil)
    (gnus-agent-directory "~/News/agent/")
    (gnus-agent-enable-expiration 'ENABLE)
    (gnus-agent-expire-days 30)
    (gnus-agent-mark-unread-after-downloaded t)
    (gnus-agent-queue-mail t)        ; queue if unplugged
    (gnus-agent-synchronize-flags nil)
    ;; group
    (gnus-group-sort-function
     '((gnus-group-sort-by-unread)
       (gnus-group-sort-by-alphabet)
       (gnus-group-sort-by-rank)))
    (gnus-group-line-format "%M%p%P%5y:%B%(%g%)\n")
    ;; (gnus-group-mode-line-format "%%b")
    ;; summary
    (gnus-auto-select-first nil)
    (gnus-summary-ignore-duplicates t)
    (gnus-suppress-duplicates t)
    (gnus-save-duplicate-list t)
    (gnus-summary-goto-unread nil)
    (gnus-summary-make-false-root 'adopt)
    (gnus-summary-thread-gathering-function
     'gnus-gather-threads-by-subject)
    (gnus-summary-gather-subject-limit 'fuzzy)
    (gnus-thread-sort-functions
     '((not gnus-thread-sort-by-date)
       (not gnus-thread-sort-by-number)))
    (gnus-subthread-sort-functions
     'gnus-thread-sort-by-date)
    (gnus-thread-hide-subtree nil)
    (gnus-thread-ignore-subject nil)
    (gnus-user-date-format-alist
     '(((gnus-seconds-today) . "Today at %R")
       ((+ (* 60 60 24) (gnus-seconds-today)) . "Yesterday, %R")
       (t . "%Y-%m-%d %R")))
    (gnus-summary-line-format "%U%R %-18,18&user-date; %-25,25f%4L   %B%S\n")
    ;; (gnus-summary-mode-line-format "[%U] %p")
    (gnus-sum-thread-tree-false-root "")
    (gnus-sum-thread-tree-indent " ")
    (gnus-sum-thread-tree-single-indent "")
    (gnus-sum-thread-tree-leaf-with-other "+-> ")
    (gnus-sum-thread-tree-root "")
    (gnus-sum-thread-tree-single-leaf "\\-> ")
    (gnus-sum-thread-tree-vertical "|")
    ;;; article
    (gnus-article-browse-delete-temp 'ask)
    (gnus-article-over-scroll nil)
    (gnus-article-show-cursor t)
    (gnus-article-sort-functions
     '((not gnus-article-sort-by-number)
       (not gnus-article-sort-by-date)))
    (gnus-article-truncate-lines nil)
    (gnus-html-frame-width 80)
    (gnus-html-image-automatic-caching t)
    (gnus-inhibit-images t)
    (gnus-max-image-proportion 0.7)
    (gnus-treat-display-smileys nil)
    ;; (gnus-article-mode-line-format "%G %S %m")
    (gnus-visible-headers
     '("^From:" "^To:" "^Cc:" "^Subject:" "^Newsgroups:" "^Date:"
       "Followup-To:" "Reply-To:" "^Organization:" "^X-Newsreader:"
       "^X-Mailer:"))
    (gnus-sorted-header-list gnus-visible-headers)
    (gnus-article-x-face-too-ugly ".*")
    :bind
    ("C-c g" . gnus)
    :hook
    ((dired-mode . gnus-dired-mode)
     (gnus-group-mode . gnus-topic-mode)
     (gnus-select-group . gnus-group-set-timestamp)
     (gnus-group-mode . hl-line-mode)
     (gnus-summary-mode . hl-line-mode)
     (gnus-browse-mode . hl-line-mode)))

  ;; useful options currently disabled
  ;; (setq gnus-use-cache t)
  ;; (setq message-citation-line-function nil)
  ;; (setq message-ignored-cited-headers nil)  

  (use-package epa-file
    :ensure nil
    :custom
    (mm-verify-option 'always)
    (mm-decrypt-option 'always)
    (mm-sign-option 'guided)
    :config
    (epa-file-enable))
#+END_SRC

*** Instant messaging
#+BEGIN_SRC emacs-lisp
  (use-package erc
    :custom
    (erc-server "irc.libera.chat")
    (erc-auto-query 'bury)
    (erc-join-buffer 'bury)
    (erc-kill-buffer-on-part t)
    (erc-kill-queries-on-quit t)
    (erc-kill-server-buffer-on-quit t)
    (erc-interpret-mirc-color t)
    (erc-rename-buffers t)
    (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
    (erc-track-exclude-types '("JOIN" "PART" "NICK" "MODE" "AWAY" "QUIT"
                               "324" "329" "332" "333" "353" "477"))
    (erc-track-enable-keybindings t)
    (erc-track-visibility nil)
    (erc-track-shorten-start 1)
    (erc-fill-column 100)
    (erc-fill-function 'erc-fill-static)
    (erc-fill-static-center 15)
    (erc-quit-reason (lambda (s) (or s "Fading out...")))
    (erc-modules '(autoaway autojoin button completion fill irccontrols keep-place list
                            match menu move-to-prompt netsplit networks noncommands readonly
                            ring stamp track hl-nicks scrolltobottom))
    :config
    (defun erc-login/w0lper ()
      "ERC libera.chat login with SASL."
      (interactive)
      (erc-tls :server "irc.libera.chat" :port "6697"))

    (defun erc-switch-buffer/w0lper (orig-fun &optional arg)
      "Advice function to move to the end of the buffer after `erc-track-switch-buffer'."
      (funcall orig-fun arg)
      (when (eq major-mode 'erc-mode)
        (end-of-buffer)))
    (advice-add 'erc-track-switch-buffer :around #'erc-switch-buffer/w0lper)
    :bind
    ("C-c i" . erc-login/w0lper))

  (use-package erc-hl-nicks
    :ensure t
    :after erc
    :config
    (erc-update-modules))

  ;; Require ERC-SASL package
  (require 'erc-services)
  (load-file "~/.emacs.d/local/erc-sasl.el")
  (require 'erc-sasl)

  (add-to-list 'erc-sasl-server-regexp-list "irc\\.libera\\.chat")

  (defun erc-login ()
    "Perform user authentication at the IRC server. (PATCHED)"
    (erc-log (format "login: nick: %s, user: %s %s %s :%s"
                     (erc-current-nick)
                     (user-login-name)
                     (or erc-system-name (system-name))
                     erc-session-server
                     erc-session-user-full-name))
    (if erc-session-password
        (erc-server-send (format "PASS %s" erc-session-password))
      (message "Logging in without password"))
    (when (and (featurep 'erc-sasl) (erc-sasl-use-sasl-p))
      (erc-server-send "CAP REQ :sasl"))
    (erc-server-send (format "NICK %s" (erc-current-nick)))
    (erc-server-send
     (format "USER %s %s %s :%s"
             (if erc-anonymous-login erc-email-userid (user-login-name))
             "0" "*"
             erc-session-user-full-name))
    (erc-update-mode-line))
#+END_SRC

*** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :diminish visual-line-mode
    :diminish subword-mode
    :diminish page-break-lines-mode
    :diminish yas-minor-mode)

  (eval-after-load 'org-indent '(diminish 'org-indent-mode))
  (eval-after-load 'face-remap '(diminish 'buffer-face-mode))
  (eval-after-load 'autorevert '(diminish 'auto-revert-mode))
#+END_SRC

** License

This project is licensed under the GNU General Public License v3.0 (GPL-3.0), unless an exception is made explicit in context. The GPL is a copyleft license that guarantees the freedom to use, modify, and distribute software. It ensures that users have control over the software they use and promotes collaboration and sharing of knowledge. By requiring that derivative works of GPL-licensed software also be licensed under the GPL, the license ensures that the freedoms it provides are extended to future generations of users and developers.

See the =LICENSE= file for more information.
